<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>WiperDogLib</web>
  <name>ConsoleService</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WiperDogLib.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1380879465000</creationDate>
  <date>1386040198000</date>
  <contentUpdateDate>1386040198000</contentUpdateDate>
  <version>1.1</version>
  <title>ConsoleService</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDogLib.ConsoleService</name>
    <number>0</number>
    <className>XWiki.XWikiRights</className>
    <guid>34ccc54a-bb52-47c6-91dc-2d51b30e5b45</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAdminGroup</groups>
    </property>
    <property>
      <levels>view,comment,edit,delete</levels>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDogLib.ConsoleService</name>
    <number>2</number>
    <className>XWiki.XWikiRights</className>
    <guid>84ab526e-39d3-45a7-9566-1cf0724840a4</guid>
    <property>
      <allow>0</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAllGroup</groups>
    </property>
    <property>
      <levels>delete,edit</levels>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDogLib.ConsoleService</name>
    <number>3</number>
    <className>XWiki.XWikiRights</className>
    <guid>b3c8e3a4-bc89-4b48-b2d0-e68a261020b8</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <groups>XWiki.XWikiAllGroup</groups>
    </property>
    <property>
      <levels>comment,view</levels>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDogLib.ConsoleService</name>
    <number>4</number>
    <className>XWiki.XWikiRights</className>
    <guid>c7be2c34-979b-4912-b3f4-f48ff5403295</guid>
    <property>
      <allow>1</allow>
    </property>
    <property>
      <levels>view,comment</levels>
    </property>
    <property>
      <users>XWiki.XWikiGuest</users>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.XWikiRights</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <allow>
        <defaultValue>1</defaultValue>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>allow</displayType>
        <name>allow</name>
        <number>4</number>
        <prettyName>Allow/Deny</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </allow>
      <groups>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>groups</name>
        <number>1</number>
        <picker>1</picker>
        <prettyName>Groups</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.GroupsClass</classType>
      </groups>
      <levels>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>1</multiSelect>
        <name>levels</name>
        <number>2</number>
        <prettyName>Levels</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>3</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.LevelsClass</classType>
      </levels>
      <users>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>users</name>
        <number>3</number>
        <picker>1</picker>
        <prettyName>Users</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.UsersClass</classType>
      </users>
    </class>
    <name>WiperDogLib.ConsoleService</name>
    <number>5</number>
    <className>XWiki.XWikiRights</className>
    <guid>f160359a-cac2-4d63-8127-d4b034c2b749</guid>
    <property>
      <allow>0</allow>
    </property>
    <property>
      <levels>edit,delete</levels>
    </property>
    <property>
      <users>XWiki.XWikiGuest</users>
    </property>
  </object>
  <content>
{{groovy}}
import groovy.json.*
//Closure to run a process
def runProcClosure(listCmd,dir,waitFor){
	def output = [:]
	ProcessBuilder builder = new ProcessBuilder(listCmd);
	//builder.redirectErrorStream(true);
	builder.directory(dir);
	Process p = builder.start();
	if(waitFor){
		output['exitVal'] = p.waitFor()
	}
	InputStream procOut  = p.getInputStream();
	InputStream procErr  = p.getErrorStream();

	BufferedReader brIn = new BufferedReader(new InputStreamReader(procOut))
	BufferedReader brErr = new BufferedReader(new InputStreamReader(procErr))
	def line = null
	StringBuffer stdin = new StringBuffer()
	while((line = brIn.readLine()) != null){
		stdin.append(line + "&lt;br/&gt;")
	}
	StringBuffer  stderr = new StringBuffer()
	while((line = brErr.readLine()) != null){
		stderr.append(line + "&lt;br/&gt;")
	}

	output["in"] = stdin.toString()
	output["err"] = stderr.toString()
	return output
}
public displayTextInHtml(String text){
        text = text.replace("\n","&lt;br/&gt;")
        println text
}
//Get Ip address from Localhost
public String getIPv4InetAddress() throws SocketException, UnknownHostException {

	String os = System.getProperty("os.name").toLowerCase();

	if(os.indexOf("nix") &gt;= 0 || os.indexOf("nux") &gt;= 0) {
		NetworkInterface ni = NetworkInterface.getByName("eth0");

		Enumeration&lt;InetAddress&gt; ias = ni.getInetAddresses();

		InetAddress iaddress;
		iaddress = ias.nextElement();
		while(!(iaddress instanceof Inet4Address)){
			iaddress = ias.nextElement();
		}

		return iaddress.toString().replace("/","");
	}

	return InetAddress.getLocalHost().getHostAddress().toString().replace("/","");  // for Windows and OS X it should work well
}
//Check process is listening on port
public boolean serverListening(String host, int port)
{
	Socket s = null;
	try
	{
		s = new Socket(host, port);
		return true;
	}
	catch (Exception e)
	{        e.printStackTrace()
		return false;
	}
	finally
	{
		if(s != null)
			try {s.close();}
			catch(Exception e){}
	}
}
//Closure to build list commands for process on Windows
def buildCmdList(isLocalhost,psExec,isInteractive,params){
       def parentCmd = new ArrayList&lt;String&gt;()
	if(!isLocalhost){
		parentCmd.add(psExec)
		parentCmd.add("\\\\" + params['wiperdog_path']['host'])
		if(isInteractive){
			parentCmd.add("-i")
		}
		parentCmd.add("-accepteula")
		parentCmd.add("-u")
		parentCmd.add('"'+ params['wiperdog_path']['user']+'"')
		parentCmd.add("-p")
		parentCmd.add('"'+ params['wiperdog_path']['pass'] +'"')
	}
	return parentCmd 
}

def params = services.WiperdogConfig.getDataFromConfig()
try{
	def cmd = request.getParameter("cmd");
	if(cmd != null &amp;&amp; cmd != ""){
		def osName = System.getProperty('os.name')
		if(osName != null &amp;&amp; osName.toLowerCase().indexOf('win') ==-1){
			def decidedWiperdog_path

			if((params != null) &amp;&amp; (params['wiperdog_path'] != null)){
				decidedWiperdog_path = params['wiperdog_path']['path']
			}else{
				println "Wiperdog home not found !"
				println "Please config it !"
				return
			}
                        def isLocalhost = true
			if(params['wiperdog_path'] != null &amp;&amp; params['wiperdog_path']['host'] != "localhost" &amp;&amp; params['wiperdog_path']['host'] != "127.0.0.1"){
				isLocalhost = false
			}

			if(request.xpage == "plain") {
				response.setContentType('text/html')
			}
			def errorStr = ""
			def command = ""
			if(params['wiperdog_path']['host'] != "localhost"){
				command = "ssh -o PasswordAuthentication=no " + params['wiperdog_path']['user'].trim() + "@" + params['wiperdog_path']['host'].trim() + " "
			}
			def proc = null

			//Get jetty port
			def commandJport = command + 'cat ' + decidedWiperdog_path +'/etc/system.properties'
			proc = commandJport.execute()
			proc.waitFor()
			def tmpHostPort = proc.in.text
			def hostPort = ""
			if(tmpHostPort != null &amp;&amp; tmpHostPort.indexOf("netty.port=") != -1){
				hostPort = tmpHostPort.split("netty.port=")[1].split("\n")[0]
			}

			if(cmd != null &amp;&amp; !cmd.equals("") &amp;&amp; cmd.equals("start")){
				command += '/bin/sh ' + decidedWiperdog_path + '/bin/startWiperdog.sh 0&lt;&amp;- &amp;&gt;/dev/null &amp;'
				proc = command.execute()
                                println "Wiperdog started."
 			}else if(cmd != null &amp;&amp; !cmd.equals("") &amp;&amp; cmd.equals("stop")){
				command += '/bin/sh ' + decidedWiperdog_path + '/bin/stopWiperdog.sh'
				proc = command.execute()
				proc.waitFor()
				errorStr = proc.err.text
				if(errorStr != null &amp;&amp; errorStr  != '')
					println "&lt;p&gt; Information: ${errorStr}&lt;/p&gt;"
                                displayTextInHtml(proc.in.text)
			}else if(cmd != null &amp;&amp; !cmd.equals("") &amp;&amp; cmd.equals("status")){
                                // check status
                                def portStatus = serverListening(params['wiperdog_path']['host'], hostPort.toInteger())
                                if(portStatus) {
                                   println "Wiperdog running."
                                } else {
                                   println "Wiperdog stopped."
                                }                                 
			}else if(cmd != null &amp;&amp; !cmd.equals("") &amp;&amp; cmd.equals("hostinfo")){
				def hostInfo = [:]
                                if(!isLocalhost) {
      				  if(params['wiperdog_path']['host'] != null &amp;&amp; params['wiperdog_path']['host'] != 'localhost') {
					hostInfo['hostName']  = InetAddress.getByName(params['wiperdog_path']['host']).getHostName()
					hostInfo['hostIP'] =  params['wiperdog_path']['host']
				  } 
                                } else {
					hostInfo['hostName']  = InetAddress.getLocalHost().getHostName()
					hostInfo['hostIP'] =  getIPv4InetAddress()
                                }

				hostInfo['hostPort'] = hostPort
                                hostInfo['homePath'] = params['wiperdog_path']['path'].replace("\\","/")
				def builder = new JsonBuilder(hostInfo)
				println builder.toPrettyString()
			}else if(cmd != null &amp;&amp; !cmd.equals("") &amp;&amp; cmd.equals("hostport")){
				command += 'cat ' + decidedWiperdog_path +'/etc/system.properties'
				proc = command.execute()
				proc.waitFor()
				println proc.in.text.split("netty.port=")[1].split("\n")[0]
			}
		}else{
			//Process for Windows
			//-- Set wiperdog PATH
			Properties props = System.getProperties();
			def xwiki_dir = props.getProperty('user.dir');
			def decidedWiperdog_path
			//def params = services.WiperdogConfig.getDataFromConfig()
			if((params != null) &amp;&amp; (params['wiperdog_path'] != null)){
				decidedWiperdog_path = params['wiperdog_path']['path']
			}else{
				println "Wiperdog home not found !"
				println "Please config it !"
				return
			}
			//-- END
			//-- Set request content type
			if(request.xpage == "plain") {
				response.setContentType('text/html')
			}
			//-- END

			def errorStr = ""
			def psExec = null
			def command = ""
			List&lt;String&gt; listCmd = new ArrayList&lt;String&gt;()
			//Get PsExec path to run remote commands
			def isLocalhost = true
			if(params['wiperdog_path'] != null &amp;&amp; params['wiperdog_path']['host'] != "localhost" &amp;&amp; params['wiperdog_path']['host'] != "127.0.0.1"){
				isLocalhost = false
			}
			if(!isLocalhost){
				psExec = System.getenv("PSTOOLS");
				if(psExec == null){
					println "Can not remote to: " + params['wiperdog_path']['host']
					println "Tool to remote (PsExec.exe) not found !"
					return
				}
                                psExec = psExec.replace("\\","/").trim()+"/psexec.exe"
 
			}
			

			//Run start wiperdog command
			if(cmd != null &amp;&amp; !cmd.equals("") &amp;&amp; cmd.equals("start")){
                                listCmd = buildCmdList(isLocalhost,psExec,true,params)
				def startScript = 'cmd /c start "" '+ params['wiperdog_path']['path'] + File.separator + 'bin\\startWiperdog.bat'
				listCmd.addAll(Arrays.asList(startScript.trim().split(" ")))
				ProcessBuilder b = new ProcessBuilder(listCmd)
				if(isLocalhost){
					b.directory(new File(params['wiperdog_path']['path']))
				}
				b.redirectErrorStream(true)
				def proc = b.start()
				proc.waitFor()
				if(proc.exitValue() == 0) {
					println "Wiperdog started at : " + params['wiperdog_path']['host']
				}
				else {
					if(params['wiperdog_path']['host'] != "localhost"){
						println "Could not start wiperdog on : !" + params['wiperdog_path']['host']  + " - " + proc.in.text
					} else {
						println "Could not start wiperdog on : !" + params['wiperdog_path']['host']  + " - " + proc.in.text
					}

				}
			}else if(cmd != null &amp;&amp; !cmd.equals("") &amp;&amp; cmd.equals("stop")){
                                listCmd = buildCmdList(isLocalhost,psExec,false,params)
                           	def stopScript = 'cmd /c '+ params['wiperdog_path']['path'] + File.separator + 'bin\\stopWiperdog.bat'
                                if(!isLocalhost) {
                                   stopScript += " &gt; "+ params['wiperdog_path']['path'] + '\\stop.tmp 2&gt;&amp;1'
                                }
				listCmd.addAll(Arrays.asList(stopScript.trim().split(" ")))
				ProcessBuilder b = new ProcessBuilder(listCmd)
				if(isLocalhost){
					b.directory(new File(params['wiperdog_path']['path']))
				}
				b.redirectErrorStream(true)
				def proc = b.start()
				proc.waitFor()
                                 if(!isLocalhost) {
					def tmpWiperdog_path = decidedWiperdog_path.replace(":\\","\$\\")
					def cmdCopy = "cmd /c copy /Y \\\\" +params['wiperdog_path']['host']+"\\"+ tmpWiperdog_path+"\\stop.tmp ."
					proc = cmdCopy.execute()
					File stopResult = new File("stop.tmp")
                                        if(stopResult.exists()) {
				           displayTextInHtml(stopResult.getText())
                                           stopResult.delete()
                                        } else {
                                           println "Failed to stop wiperdog !"
                                        }
                                } else {
				     if(proc.exitValue() != null &amp;&amp; proc.exitValue() == 0) {
					 displayTextInHtml(proc.in.text)
				     } else {
					 println proc.err.text
				     }
                                 }
			}else if(cmd != null &amp;&amp; !cmd.equals("") &amp;&amp; cmd.equals("status")){
                                def runningPort
				//-- Get Jetty port from wiperdog properties file
				if(!isLocalhost){
					def rootDir = decidedWiperdog_path.substring(0,decidedWiperdog_path.indexOf(":"))
					def cmdNetUse = "net use \\\\"+params['wiperdog_path']['host']+"\\"+rootDir + "\$" + " /user:"+params['wiperdog_path']['user']+" "+params['wiperdog_path']['pass']
					def proc = cmdNetUse.execute()
					def tmpWiperdog_path = decidedWiperdog_path.replace(":\\","\$\\")
					def cmdCopy = "cmd /c copy /Y \\\\" +params['wiperdog_path']['host']+"\\"+ tmpWiperdog_path+"\\etc\\system.properties ."
					proc = cmdCopy.execute()
					File sysProps = new File("system.properties")
					if(sysProps.exists()){
					     runningPort = sysProps.getText().split("netty.port=")[1].split("\n")[0]
                                             sysProps.delete()
					}
				} else {
					Properties jettyProps = new Properties()
					File propsFile = new File(decidedWiperdog_path +'/etc/system.properties')
					jettyProps.load(propsFile.newDataInputStream())
					runningPort = jettyProps.getProperty('netty.port')
				}
                             
                                def portStatus = serverListening(params['wiperdog_path']['host'],runningPort.toInteger() )
                                if(portStatus) {
                                   println "Wiperdog is running on ${params['wiperdog_path']['host']}" 
                                } else {
                                   println "Wiperdog not running on ${params['wiperdog_path']['host']}"
                                }
			}else if(cmd != null &amp;&amp; !cmd.equals("") &amp;&amp; cmd.equals("hostinfo")){
				def hostInfo = [:]
				//Get host name

				if(params['wiperdog_path']['host'] != null &amp;&amp; params['wiperdog_path']['host'] != 'localhost') {
					hostInfo['hostName']  = InetAddress.getByName(params['wiperdog_path']['host']).getHostName()
					hostInfo['hostIP'] =  params['wiperdog_path']['host']
				} else {
					//if()
					hostInfo['hostName']  = InetAddress.getLocalHost().getHostName()
					hostInfo['hostIP'] =  getIPv4InetAddress()
				}

				//-- Get Jetty port from wiperdog properties file
				if(!isLocalhost){
					def rootDir = decidedWiperdog_path.substring(0,decidedWiperdog_path.indexOf(":"))
					def cmdNetUse = "net use \\\\"+params['wiperdog_path']['host']+"\\"+rootDir + "\$" + " /user:"+params['wiperdog_path']['user']+" "+params['wiperdog_path']['pass']
					def proc = cmdNetUse.execute()
					def tmpWiperdog_path = decidedWiperdog_path.replace(":\\","\$\\")
					def cmdCopy = "cmd /c copy /Y \\\\" +params['wiperdog_path']['host']+"\\"+ tmpWiperdog_path+"\\etc\\system.properties ."
					proc = cmdCopy.execute()
					File sysProps = new File("system.properties")
					if(sysProps.exists()){
						hostInfo['hostPort'] = sysProps.getText().split("netty.port=")[1].split("\n")[0]
                                                sysProps.delete()
					} else {
						hostInfo['hostPort'] = ""
					}
				} else {
					Properties jettyProps = new Properties()
					File propsFile = new File(decidedWiperdog_path +'/etc/system.properties')
					jettyProps.load(propsFile.newDataInputStream())
					def hostPort = jettyProps.getProperty('netty.port')
					hostInfo['hostPort'] = hostPort
				}
                                hostInfo['homePath'] = params['wiperdog_path']['path'].replace("\\","/")
				def builder = new JsonBuilder(hostInfo)
				println builder.toPrettyString()


			}else if(cmd != null &amp;&amp; !cmd.equals("") &amp;&amp; cmd.equals("hostport")){
				//-- Get Jetty port from wiperdog properties
				Properties jettyProps = new Properties()
				File propsFile = new File(decidedWiperdog_path +'/etc/system.properties')
				jettyProps.load(propsFile.newDataInputStream())
				def hostPort = jettyProps.getProperty('netty.port')
				println hostPort
			}
		}
	}
}catch(Exception ex){
	println ex
}

{{/groovy}}</content>
</xwikidoc>
